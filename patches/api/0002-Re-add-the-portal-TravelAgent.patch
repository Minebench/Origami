From aec65873fdc2276d5948fd520dd3cf5451819708 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Sat, 21 Dec 2019 02:17:03 +0100
Subject: [PATCH] Re-add the portal TravelAgent

---
 src/main/java/org/bukkit/TravelAgent.java     | 123 ++++++++++++++++++
 .../event/entity/EntityPortalEvent.java       |  95 ++++++++++++++
 .../event/player/PlayerPortalEvent.java       | 101 ++++++++++++++
 3 files changed, 319 insertions(+)
 create mode 100644 src/main/java/org/bukkit/TravelAgent.java

diff --git a/src/main/java/org/bukkit/TravelAgent.java b/src/main/java/org/bukkit/TravelAgent.java
new file mode 100644
index 000000000..efbdbe38c
--- /dev/null
+++ b/src/main/java/org/bukkit/TravelAgent.java
@@ -0,0 +1,123 @@
+package org.bukkit;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * The Travel Agent handles the creation and the research of Nether and End
+ * portals when Entities try to use one.
+ * <p>
+ * It is used in {@link org.bukkit.event.entity.EntityPortalEvent} and in
+ * {@link org.bukkit.event.player.PlayerPortalEvent} to help developers
+ * reproduce and/or modify Vanilla behaviour.
+ * @deprecated TravelAgent API is no longer fully supported!
+ */
+@Deprecated
+public interface TravelAgent {
+
+    /**
+     * Set the Block radius to search in for available portals.
+     *
+     * Will currently not work for entities searching for portals. :(
+     *
+     * @param radius the radius in which to search for a portal from the
+     *     location
+     * @return this travel agent
+     */
+    @NotNull
+    public TravelAgent setSearchRadius(int radius);
+
+    /**
+     * Gets the search radius value for finding an available portal.
+     *
+     * @return the currently set search radius
+     */
+    public int getSearchRadius();
+
+    /**
+     * Sets the maximum radius from the given location to create a portal.
+     *
+     * @param radius the radius in which to create a portal from the location
+     * @return this travel agent
+     */
+    @NotNull
+    public TravelAgent setCreationRadius(int radius);
+
+    /**
+     * Gets the maximum radius from the given location to create a portal.
+     *
+     * @return the currently set creation radius
+     */
+    public int getCreationRadius();
+
+    /**
+     * Returns whether the TravelAgent will attempt to create a destination
+     * portal or not.
+     *
+     * Will return false for all entities that are not Players
+     *
+     * @return whether the TravelAgent should create a destination portal or
+     *     not
+     */
+    public boolean getCanCreatePortal();
+
+    /**
+     * Sets whether the TravelAgent should attempt to create a destination
+     * portal or not.
+     *
+     * Currently only works for Player portals :(
+     *
+     * @param create Sets whether the TravelAgent should create a destination
+     *     portal or not
+     */
+    public void setCanCreatePortal(boolean create);
+
+    /**
+     * Attempt to find a portal near the given location, if a portal is not
+     * found it will attempt to create one.
+     *
+     * @param location the location where the search for a portal should begin
+     * @return the location of a portal which has been found or returns the
+     *     location passed to the method if unsuccessful
+     * @see #createPortal(Location)
+     * @deprecated Will not do anything anymore in a Vanilla agent. Use your own algorithm in the event listener!
+     */
+    @Deprecated
+    @NotNull
+    default Location findOrCreate(@NotNull Location location) {
+        return location;
+    }
+
+    /**
+     * Attempt to find a portal near the given location.
+     *
+     * @param location the desired location of the portal
+     * @return the location of the nearest portal to the location or returns
+     *     null if none could be found
+     * @deprecated Will not do anything anymore in a Vanilla agent. Use your own algorithm in the event listener!
+     */
+    @Deprecated
+    @Nullable
+    default Location findPortal(@NotNull Location location) {
+        return null;
+    }
+
+    /**
+     * Attempt to create a portal near the given location.
+     * <p>
+     * In the case of a Nether portal teleportation, this will attempt to
+     * create a Nether portal.
+     * <p>
+     * In the case of an Ender portal teleportation, this will (re-)create the
+     * obsidian platform and clean blocks above it.
+     *
+     * @param location the desired location of the portal
+     * @return true if a portal was successfully created
+     * @deprecated Will not do anything anymore in a Vanilla agent. Use your own algorithm in the event listener!
+     */
+    @Deprecated
+    default boolean createPortal(@NotNull Location location) {
+        return false;
+    }
+
+}
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
index 67fb9d93e..710a85efa 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
@@ -16,6 +16,41 @@ public class EntityPortalEvent extends EntityTeleportEvent {
     private static final HandlerList handlers = new HandlerList();
     private int searchRadius = 128;
 
+    // Origami start - Re-add the portal TravelAgent
+    protected org.bukkit.TravelAgent travelAgent = new org.bukkit.TravelAgent() {
+        @NotNull
+        @Override
+        public org.bukkit.TravelAgent setSearchRadius(int radius) {
+            EntityPortalEvent.this.setSearchRadius(radius);
+            return this;
+        }
+
+        @Override
+        public int getSearchRadius() {
+            return EntityPortalEvent.this.getSearchRadius();
+        }
+
+        @NotNull
+        @Override
+        public org.bukkit.TravelAgent setCreationRadius(int radius) {
+            return this;
+        }
+
+        @Override
+        public int getCreationRadius() {
+            return 0;
+        }
+
+        @Override
+        public boolean getCanCreatePortal() {
+            return false;
+        }
+
+        @Override
+        public void setCanCreatePortal(boolean create) {}
+    };
+    // Origami end
+
     public EntityPortalEvent(@NotNull final Entity entity, @NotNull final Location from, @Nullable final Location to) {
         super(entity, from, to);
     }
@@ -44,6 +79,66 @@ public class EntityPortalEvent extends EntityTeleportEvent {
         return searchRadius;
     }
 
+    // Origami start - Re-add the portal TravelAgent
+    /**
+     * Sets whether or not the Travel Agent will be used.
+     * <p>
+     * If this is set to true, the TravelAgent will try to find a Portal at
+     * the {@link #getTo()} Location, and will try to create one if there is
+     * none.
+     * <p>
+     * If this is set to false, the {@link #getEntity()} will only be
+     * teleported to the {@link #getTo()} Location.
+     *
+     * @param useTravelAgent whether to use the Travel Agent
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public void useTravelAgent(boolean useTravelAgent) {
+        throw new UnsupportedOperationException("TravelAgent API is no longer fully supported!");
+    }
+
+    /**
+     * Gets whether or not the Travel Agent will be used.
+     * <p>
+     * If this is set to true, the TravelAgent will try to find a Portal at
+     * the {@link #getTo()} Location, and will try to create one if there is
+     * none.
+     * <p>
+     * If this is set to false, the {@link #getEntity()} will only be
+     * teleported to the {@link #getTo()} Location.
+     *
+     * @return whether to use the Travel Agent
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public boolean useTravelAgent() {
+        return true;
+    }
+
+    /**
+     * Gets the Travel Agent used (or not) in this event.
+     *
+     * @return the Travel Agent used (or not) in this event
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    @NotNull
+    public org.bukkit.TravelAgent getPortalTravelAgent() {
+        return this.travelAgent;
+    }
+
+    /**
+     * Sets the Travel Agent used (or not) in this event.
+     *
+     * @param travelAgent the Travel Agent used (or not) in this event
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public void setPortalTravelAgent(@NotNull org.bukkit.TravelAgent travelAgent) {
+        throw new UnsupportedOperationException("TravelAgent API is no longer fully supported!");
+    }
+    // Origami end
     @NotNull
     @Override
     public HandlerList getHandlers() {
diff --git a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
index a6f91166a..656bfbab5 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
@@ -17,6 +17,43 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
     private int getSearchRadius = 128;
     private boolean canCreatePortal = true;
     private int creationRadius = 16;
+    // Origami start - Re-add the portal TravelAgent
+    protected org.bukkit.TravelAgent travelAgent = new org.bukkit.TravelAgent() {
+        @NotNull
+        @Override
+        public org.bukkit.TravelAgent setSearchRadius(int radius) {
+            PlayerPortalEvent.this.setSearchRadius(radius);
+            return this;
+        }
+
+        @Override
+        public int getSearchRadius() {
+            return PlayerPortalEvent.this.getSearchRadius();
+        }
+
+        @NotNull
+        @Override
+        public org.bukkit.TravelAgent setCreationRadius(int radius) {
+            PlayerPortalEvent.this.setCreationRadius(radius);
+            return this;
+        }
+
+        @Override
+        public int getCreationRadius() {
+            return PlayerPortalEvent.this.getCreationRadius();
+        }
+
+        @Override
+        public boolean getCanCreatePortal() {
+            return PlayerPortalEvent.this.getCanCreatePortal();
+        }
+
+        @Override
+        public void setCanCreatePortal(boolean create) {
+            PlayerPortalEvent.this.setCanCreatePortal(create);
+        }
+    };
+    // Origami end
 
     public PlayerPortalEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to) {
         super(player, from, to);
@@ -105,6 +142,70 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
     public int getCreationRadius() {
         return creationRadius;
     }
+    // Origami start - Re-add the portal TravelAgent
+    /**
+     * Sets whether or not the Travel Agent will be used.
+     * <p>
+     * If this is set to true, the TravelAgent will try to find a Portal at
+     * the {@link #getTo()} Location, and will try to create one if there is
+     * none.
+     * <p>
+     * If this is set to false, the {@link #getPlayer()} will only be
+     * teleported to the {@link #getTo()} Location.
+     *
+     * @param useTravelAgent whether to use the Travel Agent
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public void useTravelAgent(boolean useTravelAgent) {
+        Exception e = new UnsupportedOperationException("TravelAgent API is no longer fully supported!");
+        e.fillInStackTrace();
+        org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, e.getMessage(), e);
+    }
+
+    /**
+     * Gets whether or not the Travel Agent will be used.
+     * <p>
+     * If this is set to true, the TravelAgent will try to find a Portal at
+     * the {@link #getTo()} Location, and will try to create one if there is
+     * none.
+     * <p>
+     * If this is set to false, the {@link #getPlayer()}} will only be
+     * teleported to the {@link #getTo()} Location.
+     *
+     * @return whether to use the Travel Agent
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public boolean useTravelAgent() {
+        return true;
+    }
+
+    /**
+     * Gets the Travel Agent used (or not) in this event.
+     *
+     * @return the Travel Agent used (or not) in this event
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @NotNull
+    @Deprecated
+    public org.bukkit.TravelAgent getPortalTravelAgent() {
+        return this.travelAgent;
+    }
+
+    /**
+     * Sets the Travel Agent used (or not) in this event.
+     *
+     * @param travelAgent the Travel Agent used (or not) in this event
+     * @deprecated TravelAgent API is no longer fully supported!
+     */
+    @Deprecated
+    public void setPortalTravelAgent(@NotNull org.bukkit.TravelAgent travelAgent) {
+        Exception e = new UnsupportedOperationException("TravelAgent API is no longer fully supported!");
+        e.fillInStackTrace();
+        org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, e.getMessage(), e);
+    }
+    // Origami end
 
     @NotNull
     @Override
-- 
2.25.1.windows.1

