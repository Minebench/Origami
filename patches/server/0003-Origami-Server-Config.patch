From 5841afb16fce8b433720d80c8bb43aa3a2946504 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Wed, 15 May 2019 23:51:15 +0100
Subject: [PATCH] Origami Server Config

---
 .../origami/config/OrigamiConfig.java         | 163 ++++++++++++++++++
 .../net/minecraft/server/DedicatedServer.java |  12 +-
 src/main/java/net/minecraft/server/World.java |   6 +-
 .../org/bukkit/craftbukkit/CraftServer.java   |   9 +-
 .../java/org/bukkit/craftbukkit/Main.java     |   7 +
 5 files changed, 182 insertions(+), 15 deletions(-)
 create mode 100644 src/main/java/de/minebench/origami/config/OrigamiConfig.java

diff --git a/src/main/java/de/minebench/origami/config/OrigamiConfig.java b/src/main/java/de/minebench/origami/config/OrigamiConfig.java
new file mode 100644
index 000000000..c95d167c2
--- /dev/null
+++ b/src/main/java/de/minebench/origami/config/OrigamiConfig.java
@@ -0,0 +1,163 @@
+package de.minebench.origami.config;
+
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+
+public final class OrigamiConfig {
+
+    public static final String CONFIG_HEADER = "Configuration file for Origami.";
+    public static final int CURRENT_CONFIG_VERSION = 0;
+
+    private static final Object[] EMPTY = new Object[0];
+
+    private static File configFile;
+    private static YamlConfiguration config;
+    private static int configVersion;
+
+    public static void init(final File file) {
+        OrigamiConfig.configFile = file;
+        final YamlConfiguration config = new YamlConfiguration();
+        config.options().header(CONFIG_HEADER);
+        config.options().copyDefaults(true);
+
+        if (!file.exists()) {
+            try {
+                file.createNewFile();
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to create origami config", ex);
+            }
+        } else {
+            try {
+                config.load(file);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to load origami config", ex);
+                throw new RuntimeException(ex);
+            }
+        }
+
+        OrigamiConfig.load(config);
+    }
+
+    public static void load(final YamlConfiguration config) {
+        OrigamiConfig.config = config;
+        OrigamiConfig.configVersion = OrigamiConfig.getInt("config-version-please-do-not-modify-me", CURRENT_CONFIG_VERSION);
+
+        for (final Method method : OrigamiConfig.class.getDeclaredMethods()) {
+            if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                    !Modifier.isPrivate(method.getModifiers()) || !Modifier.isStatic(method.getModifiers())) {
+                continue;
+            }
+
+            try {
+                method.setAccessible(true);
+                method.invoke(null, EMPTY);
+            } catch (final Exception ex) {
+                throw new RuntimeException(ex);
+            }
+        }
+
+        /* We re-save to add new options */
+        try {
+            config.save(OrigamiConfig.configFile);
+        } catch (final Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Unable to save origami config", ex);
+        }
+    }
+
+    private static boolean getBoolean(final String path, final boolean dfl) {
+        OrigamiConfig.config.addDefault(path, Boolean.valueOf(dfl));
+        return OrigamiConfig.config.getBoolean(path, dfl);
+    }
+
+    private static int getInt(final String path, final int dfl) {
+        OrigamiConfig.config.addDefault(path, Integer.valueOf(dfl));
+        return OrigamiConfig.config.getInt(path, dfl);
+    }
+
+    private static double getDouble(final String path, final double dfl) {
+        OrigamiConfig.config.addDefault(path, Double.valueOf(dfl));
+        return OrigamiConfig.config.getDouble(path, dfl);
+    }
+
+    public static final class WorldConfig {
+
+        public final String worldName;
+        public ConfigurationSection config;
+
+        public WorldConfig(final String worldName) {
+            this.worldName = worldName;
+            this.init();
+        }
+
+        public void init() {
+            ConfigurationSection worldsSection = OrigamiConfig.config.getConfigurationSection("worlds");
+            if (worldsSection == null) {
+                worldsSection = OrigamiConfig.config.createSection("worlds");
+            }
+            ConfigurationSection defaultSection = worldsSection.getConfigurationSection("default");
+            if (defaultSection == null) {
+                defaultSection = worldsSection.createSection("default");
+                worldsSection.set("default", defaultSection);
+            }
+            OrigamiConfig.config.set("worlds", worldsSection);
+            ConfigurationSection section = worldsSection.getConfigurationSection(this.worldName);
+            if (section == null) {
+                section = defaultSection;
+            }
+
+            this.load(section);
+        }
+
+        public void load(final ConfigurationSection config) {
+            this.config = config;
+
+            for (final Method method : WorldConfig.class.getDeclaredMethods()) {
+                if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                        !Modifier.isPrivate(method.getModifiers()) || Modifier.isStatic(method.getModifiers())) {
+                    continue;
+                }
+
+                try {
+                    method.setAccessible(true);
+                    method.invoke(this, EMPTY);
+                } catch (final Exception ex) {
+                    throw new RuntimeException(ex);
+                }
+            }
+
+            /* We re-save to add new options */
+            try {
+                OrigamiConfig.config.save(OrigamiConfig.configFile);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Unable to save origami config", ex);
+            }
+        }
+
+        private boolean getBoolean(final String path, final boolean dfl) {
+            this.config.addDefault(path, Boolean.valueOf(dfl));
+            return this.config.getBoolean(path, dfl);
+        }
+
+        private int getInt(final String path, final int dfl) {
+            this.config.addDefault(path, Integer.valueOf(dfl));
+            return this.config.getInt(path, dfl);
+        }
+
+        private double getDouble(final String path, final double dfl) {
+            this.config.addDefault(path, Double.valueOf(dfl));
+            return this.config.getDouble(path, dfl);
+        }
+    }
+
+    public static boolean pluginCommandsInVanillaDispatcher = false;
+    private static void pluginCommandsInVanillaDispatcher() {
+        pluginCommandsInVanillaDispatcher = getBoolean("plugin-commands-in-vanilla-dispatcher", pluginCommandsInVanillaDispatcher);
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 21a05b2b2..94a5ec930 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,34 +1,29 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import com.google.gson.JsonObject;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.datafixers.DataFixer;
-import java.io.BufferedReader;
+
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
+
+import de.minebench.origami.config.OrigamiConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
-import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.command.CommandSender;
-import org.bukkit.craftbukkit.LoggerOutputStream;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
@@ -214,6 +209,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             com.destroystokyo.paper.PaperConfig.registerCommands();
             com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
             // Paper end
+            OrigamiConfig.init((File) options.valueOf("origami-settings")); // Origami - Server Config
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 57b0f1a38..0924d0793 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1,12 +1,12 @@
 	package net.minecraft.server;
 
-import co.aikar.timings.Timings;
 import com.destroystokyo.paper.antixray.ChunkPacketBlockController; // Paper - Anti-Xray
 import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray; // Paper - Anti-Xray
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
+import de.minebench.origami.config.OrigamiConfig;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import java.util.Collection;
@@ -35,7 +35,6 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.craftbukkit.util.LongHashSet; // Paper
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
@@ -183,9 +182,12 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
         return ((ChunkProviderServer) this.chunkProvider).chunks.get(ChunkCoordIntPair.a(x, z)); // Paper - optimize getChunkIfLoaded
     }
 
+    public final OrigamiConfig.WorldConfig origamiConfig; // Origami - Server Config
+
     protected World(IDataManager idatamanager, @Nullable PersistentCollection persistentcollection, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(worlddata.getName(), this.spigotConfig); // Paper
+        this.origamiConfig = new OrigamiConfig.WorldConfig(worlddata.getName()); // Origami - Server Config
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this.paperConfig) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1c04af4de..a8ac59d54 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -8,7 +8,6 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -21,10 +20,10 @@ import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
+import de.minebench.origami.config.OrigamiConfig;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -61,7 +60,6 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.generator.CraftChunkData;
 import org.bukkit.craftbukkit.help.SimpleHelpMap;
 import org.bukkit.craftbukkit.inventory.CraftFurnaceRecipe;
-import org.bukkit.craftbukkit.inventory.CraftInventoryCustom;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftItemFactory;
 import org.bukkit.craftbukkit.inventory.CraftMerchantCustom;
@@ -134,7 +132,6 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
-import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
@@ -146,7 +143,7 @@ import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
-import java.util.HashMap;
+
 import org.bukkit.Keyed;
 import org.apache.commons.lang.StringUtils;
 import org.bukkit.NamespacedKey;
@@ -793,6 +790,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        OrigamiConfig.init((File) console.options.valueOf("origami-settings")); // Origami - Server Config
         for (WorldServer world : console.getWorlds()) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -809,6 +807,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.origamiConfig.init(); // Origami - Server Config
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index b145b55bc..1e9bcb5de 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -136,6 +136,13 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
                 // Paper end
+                // Origami Start - Server Config
+                acceptsAll(asList("origami", "origami-settings"), "File for origami settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("origami.yml"))
+                        .describedAs("Yml file");
+                // Origami End - Server Config
 
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
-- 
2.18.0.windows.1

