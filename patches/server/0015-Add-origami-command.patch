From d4baf545e143ff47c059acf8989a583b60dde5f3 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Fri, 3 Jan 2020 15:52:09 +0100
Subject: [PATCH] Add origami command

---
 .../de/minebench/origami/OrigamiCommand.java  | 127 ++++++++++++++++++
 .../de/minebench/origami/OrigamiConfig.java   |   2 +
 2 files changed, 129 insertions(+)
 create mode 100644 src/main/java/de/minebench/origami/OrigamiCommand.java

diff --git a/src/main/java/de/minebench/origami/OrigamiCommand.java b/src/main/java/de/minebench/origami/OrigamiCommand.java
new file mode 100644
index 000000000..45f72f757
--- /dev/null
+++ b/src/main/java/de/minebench/origami/OrigamiCommand.java
@@ -0,0 +1,127 @@
+package de.minebench.origami;
+
+import com.google.common.base.Functions;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.WorldServer;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+
+public class OrigamiCommand extends Command {
+
+    public static void register() {
+        MinecraftServer.getServer().server.getCommandMap().register("origami", "Origami", new OrigamiCommand());
+    }
+
+    private OrigamiCommand() {
+        super("origami");
+        this.description = "Origami related commands";
+        this.usageMessage = "/origami [reload | version]";
+        this.setPermission("bukkit.command.origami");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length <= 1)
+            return getListMatchingLast(args, "reload", "version");
+        return Collections.emptyList();
+    }
+
+    // Code from Mojang - copyright them
+    public static List<String> getListMatchingLast(String[] args, String... matches) {
+        return getListMatchingLast(args, (Collection) Arrays.asList(matches));
+    }
+
+    public static boolean matches(String s, String s1) {
+        return s1.regionMatches(true, 0, s, 0, s.length());
+    }
+
+    public static List<String> getListMatchingLast(String[] strings, Collection<?> collection) {
+        String last = strings[strings.length - 1];
+        ArrayList<String> results = Lists.newArrayList();
+
+        if (!collection.isEmpty()) {
+            Iterator iterator = Iterables.transform(collection, Functions.toStringFunction()).iterator();
+
+            while (iterator.hasNext()) {
+                String s1 = (String) iterator.next();
+
+                if (matches(last, s1)) {
+                    results.add(s1);
+                }
+            }
+
+            if (results.isEmpty()) {
+                iterator = collection.iterator();
+
+                while (iterator.hasNext()) {
+                    Object object = iterator.next();
+
+                    if (object instanceof MinecraftKey && matches(last, ((MinecraftKey) object).getKey())) {
+                        results.add(String.valueOf(object));
+                    }
+                }
+            }
+        }
+
+        return results;
+    }
+    // end copy stuff
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length == 0) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        switch (args[0].toLowerCase(Locale.ENGLISH))  {
+            case "reload":
+                doReload(sender);
+                break;
+            case "ver":
+            case "version":
+                Command ver = Bukkit.getServer().getCommandMap().getCommand("version");
+                if (ver != null) {
+                    ver.execute(sender, commandLabel, new String[0]);
+                    break;
+                }
+                // else - fall through to default
+            default:
+                sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+                return false;
+        }
+
+        return true;
+    }
+
+    private void doReload(CommandSender sender) {
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+        Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+        MinecraftServer console = MinecraftServer.getServer();
+        OrigamiConfig.init((File) console.options.valueOf("origami-settings"));
+        for (WorldServer world : console.getWorlds()) {
+            world.origamiConfig.init();
+        }
+        console.server.reloadCount++;
+
+        Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Origami config reload complete.");
+    }
+}
diff --git a/src/main/java/de/minebench/origami/OrigamiConfig.java b/src/main/java/de/minebench/origami/OrigamiConfig.java
index 53c9d964f..ad34239e8 100644
--- a/src/main/java/de/minebench/origami/OrigamiConfig.java
+++ b/src/main/java/de/minebench/origami/OrigamiConfig.java
@@ -44,6 +44,8 @@ public final class OrigamiConfig {
         }
 
         OrigamiConfig.load(OrigamiConfig.class, null);
+
+        OrigamiCommand.register();
     }
 
     public static void load(Class<?> clazz, Object instance) {
-- 
2.25.1.windows.1

