From 24b2693033581e59f77a48a005c4c129b6cb93a8 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Tue, 4 Sep 2018 19:07:57 -0400
Subject: [PATCH] MC-2025: Save and load entity AABB to prevent wobble

What follows is a summarized analysis provided on the Mojira and associated subreddit by various MC community members
who have investigated this issue and found a solution. This work is largely a result of their efforts.

The underlying cause of MC-2025 is that sometimes an AABB ends up slightly smaller than the desired width. If this
happens before the entity is pushed up against a boundary (i.e. blocks or walls), then upon chunk save and reload, the
AABB size will be recomputed such that it is intersecting the wall, allowing the entity to be pushed into the wall,
suffocate, and die. Although the rounding artifacts get larger at larger world coordinates, the drift we see is
miniscule. Closer to the world origin, we have seen error on the order of 2-46. Compare this to the fact that
(due to MC-4), entity coordinates send to clients are quantized to multiples of 1/4096 (2-12).

But, OMG, do the rounding errors mean that AABB's accumulate shrinkage over time? Actually, no. The statistics on IEEE
rounding do not have that kind of bias. What has not been stated is that the AABB is just as likely to end up larger
than the expected width; on save and reload, the entity ends up slightly away from the wall, and we don't notice any
problem. In reality, the AABB size ends up undergoing random wobble around the expected value all the time, and that
wobble isn't functionally any different from the kind we'd get even if we tried to force the AABB size to be stable!

This reasoning leads us to one clear conclusion: The simplest, least invasive, and most correct solution is to just
store the AABB in NBT data on chunk save and restore the AABB exactly as it was saved upon reload.
---
 .../java/net/minecraft/world/entity/Entity.java  | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index fd82fb4a9..1a2fadee9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1736,6 +1736,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
             if (fromNetherPortal) {
                 nbttagcompound.setBoolean("Paper.FromNetherPortal", true);
             }
+            // Paper start - MC-2025 fix - Save entity AABB and load it, floating point issues recalculating AABB can result in wobble
+            AxisAlignedBB boundingBox = this.getBoundingBox();
+            nbttagcompound.set("Paper.AAAB", this.createList(
+                    boundingBox.minX, boundingBox.minY, boundingBox.minZ,
+                    boundingBox.maxX, boundingBox.maxY, boundingBox.maxZ
+            ));
             // Paper end
             // Origami start
             if (fromMobFarm) {
@@ -1819,6 +1825,16 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
             } else {
                 throw new IllegalStateException("Entity has invalid position");
             }
+            // Paper start - MC-2025 fix - Save entity AABB and load it, floating point issues recalculating AABB can result in wobble
+            // Placement is important, always after the setPosition call above
+            if (nbttagcompound.hasKey("Paper.AABB")) {
+                NBTTagList savedBB = nbttagcompound.getList("Paper.AABB", 6);
+                this.setBoundingBox(new AxisAlignedBB(
+                        savedBB.getDoubleAt(0), savedBB.getDoubleAt(1), savedBB.getDoubleAt(2),
+                        savedBB.getDoubleAt(3), savedBB.getDoubleAt(4), savedBB.getDoubleAt(5)
+                ));
+            }
+            // Paper end
 
             // CraftBukkit start
             if (this instanceof EntityLiving) {
-- 
2.25.1.windows.1

