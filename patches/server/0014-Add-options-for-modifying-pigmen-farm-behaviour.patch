From 270e8198c3b7ce18f86f7f19f76a3bc7e9f2d85d Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Sun, 29 Dec 2019 00:53:17 +0100
Subject: [PATCH] Add options for modifying pigmen farm behaviour

---
 .../de/minebench/origami/OrigamiConfig.java   | 16 ++++++++++++++
 .../net/minecraft/server/BlockPortal.java     | 22 ++++++++++++++++++-
 .../java/net/minecraft/server/Entity.java     |  7 ++++++
 .../minecraft/server/EntityInsentient.java    |  2 +-
 4 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/src/main/java/de/minebench/origami/OrigamiConfig.java b/src/main/java/de/minebench/origami/OrigamiConfig.java
index 1aa355df7f..8b4682eb63 100644
--- a/src/main/java/de/minebench/origami/OrigamiConfig.java
+++ b/src/main/java/de/minebench/origami/OrigamiConfig.java
@@ -148,6 +148,22 @@ public final class OrigamiConfig {
         private void pigmenDontTargetUnlessHit() {
             pigmenDontTargetUnlessHit = getBoolean("pigmen.dont-target-unless-hit", pigmenDontTargetUnlessHit);
         }
+        public int pigmenPortalSpawn = 2000;
+        public double pigmenPortalBoost = 0.0;
+        public boolean pigmenFarmsWaterAi = false;
+        public int pigmenFarmsRadius = 16;
+        public int pigmenFarmsCount = 5;
+        private void pigmenImprovements() {
+            pigmenPortalSpawn = getInt("pigmen.portal-spawn", pigmenPortalSpawn);
+            pigmenPortalBoost = getDouble("pigmen.portal-boost", pigmenPortalBoost);
+            pigmenFarmsWaterAi = getBoolean("pigmen.farms.water-ai", pigmenFarmsWaterAi);
+            pigmenFarmsRadius = getInt("pigmen.farms.radius", pigmenFarmsRadius);
+            pigmenFarmsCount = getInt("pigmen.farms.count", pigmenFarmsCount);
+            if (pigmenFarmsWaterAi) {
+                Bukkit.getLogger().info("Pigmen water AI in farms is enabled");
+                Bukkit.getLogger().info("Farm detection radius: " + pigmenFarmsRadius + ", count: " + pigmenFarmsCount);
+            }
+        }
         public double enderCrystalAttackRadius = 0.0D;
         public float enderCrystalAttackDamage = 1.0F;
         private void crystalTurrets() {
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 09c7c13183..d6e5866255 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -35,7 +35,7 @@ public class BlockPortal extends Block {
 
     @Override
     public void tick(IBlockData iblockdata, WorldServer worldserver, BlockPosition blockposition, Random random) {
-        if (worldserver.spigotConfig.enableZombiePigmenPortalSpawns && worldserver.worldProvider.isOverworld() && worldserver.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && random.nextInt(2000) < worldserver.getDifficulty().a()) { // Spigot
+        if (worldserver.spigotConfig.enableZombiePigmenPortalSpawns && worldserver.worldProvider.isOverworld() && worldserver.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && random.nextInt(worldserver.origamiConfig.pigmenPortalSpawn) < worldserver.getDifficulty().a()) { // Spigot // Origami - configurable portal spawn
             while (worldserver.getType(blockposition).getBlock() == this) {
                 blockposition = blockposition.down();
             }
@@ -48,6 +48,13 @@ public class BlockPortal extends Block {
                     entity.fromNetherPortal = true; // Paper
                     if (worldserver.paperConfig.nerfNetherPortalPigmen) ((EntityInsentient) entity).aware = false; // Paper
                     entity.portalCooldown = entity.ba();
+                    // Origami start - Pigmen farm improvements
+                    if (worldserver.origamiConfig.pigmenFarmsWaterAi && worldserver.origamiConfig.pigmenFarmsCount > 0 && worldserver.origamiConfig.pigmenFarmsRadius > 0) {
+                        if (worldserver.getEntitiesByClass(EntityPigZombie.class, new AxisAlignedBB(blockposition).grow(worldserver.origamiConfig.pigmenFarmsRadius)).size() > worldserver.origamiConfig.pigmenFarmsCount) {
+                            entity.fromMobFarm = true;
+                        }
+                    }
+                    // Origami end
                 }
             }
         }
@@ -92,6 +99,19 @@ public class BlockPortal extends Block {
     @Override
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Entity entity) {
         if (!entity.isPassenger() && !entity.isVehicle() && entity.canPortal()) {
+            // Origami start - Pig Zombie portal boost
+            if (entity instanceof EntityPigZombie && world.origamiConfig.pigmenPortalBoost > 0) {
+                Vec3D velocity = new Vec3D(entity.getLookDirection().x, 0, entity.getLookDirection().z);
+                if (entity.getDirection().m() != iblockdata.get(BlockPortal.AXIS)) {
+                    velocity = velocity.b(90f); // Rotate around y axis
+                }
+                velocity = velocity
+                        .d() // Normalize
+                        .a(world.origamiConfig.pigmenPortalBoost); // Multiply
+                entity.move(EnumMoveType.SELF, velocity);
+                return;
+            }
+            // Origami end
             // CraftBukkit start - Entity in portal
             EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new org.bukkit.Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ()));
             world.getServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index e0ab058bf9..6e9b226460 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -197,6 +197,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public boolean isTemporarilyActive = false; // Paper
     public boolean spawnedViaMobSpawner; // Paper - Yes this name is similar to above, upstream took the better one
     public boolean fromNetherPortal; // Paper
+    public boolean fromMobFarm = false; // Origami - Detect Mobs from mob farms
     protected int numCollisions = 0; // Paper
     public void inactiveTick() { }
     // Spigot end
@@ -1703,6 +1704,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 nbttagcompound.setBoolean("Paper.FromNetherPortal", true);
             }
             // Paper end
+            // Origami start
+            if (fromMobFarm) {
+                nbttagcompound.setBoolean("Origami.FromMobFarm", true);
+            }
+            // Origami end
             return nbttagcompound;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Saving entity NBT");
@@ -1848,6 +1854,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT;
             }
             // Paper end
+            fromMobFarm = nbttagcompound.getBoolean("Origami.FromMobFarm"); // Origami - Restore entity's from mob farm status
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Loading entity NBT");
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 5aca7a9131..beba265ea8 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -665,7 +665,7 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     protected final void doTick() {
         ++this.ticksFarFromPlayer;
-        if (!this.aware) { // Paper start - Allow nerfed mobs to jump, float and take water damage
+        if (!this.aware || this.fromMobFarm && this.inWater) { // Paper start - Allow nerfed mobs to jump, float and take water damage // Origami - Mobfarm water ai
             if (goalFloat != null) {
                 if (goalFloat.validConditions()) goalFloat.update();
                 this.getControllerJump().jumpIfSet();
-- 
2.25.1.windows.1

