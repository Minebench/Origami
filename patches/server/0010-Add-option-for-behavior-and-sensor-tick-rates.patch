From d33f83b4161bfc2b4599f7fe7d8e941b24db516e Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Mon, 2 Dec 2019 20:19:11 +0100
Subject: [PATCH] Add option for behavior and sensor tick rates

---
 .../de/minebench/origami/OrigamiConfig.java   | 26 +++++++++++++++++++
 .../java/net/minecraft/server/Behavior.java   | 14 +++++++++-
 .../java/net/minecraft/server/Sensor.java     | 14 +++++++++-
 3 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/src/main/java/de/minebench/origami/OrigamiConfig.java b/src/main/java/de/minebench/origami/OrigamiConfig.java
index e13058f2a..713c36afd 100644
--- a/src/main/java/de/minebench/origami/OrigamiConfig.java
+++ b/src/main/java/de/minebench/origami/OrigamiConfig.java
@@ -1,11 +1,14 @@
 package de.minebench.origami;
 
 import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 
 import java.io.File;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.logging.Level;
 
 public final class OrigamiConfig {
@@ -135,6 +138,29 @@ public final class OrigamiConfig {
         private void onlyGetGeneratedFeatures() {
             onlyFindGeneratedFeatures = getBoolean("only-find-generated-features", onlyFindGeneratedFeatures);
         }
+        
+        private Map<String, Integer> tickRates = new HashMap<>();
+        private void tickRates() {
+            config.addDefault("worlds.default.tick-rates.sensor.villager.secondaryplaces", 40);
+            config.addDefault("worlds.default.tick-rates.behavior.villager.positionvalidate", 60);
+            tickRates = new HashMap<>();
+            Bukkit.getLogger().info("Tick rates:");
+            ConfigurationSection tickRatesSection = config.getConfigurationSection("worlds." + worldName + ".tick-rates");
+            if (tickRatesSection == null) {
+                config.getConfigurationSection("worlds.default.tick-rates");
+            }
+            for (String key : tickRatesSection.getKeys(true)) {
+                int tickRate = tickRatesSection.getInt(key);
+                tickRates.put(key.toLowerCase(), tickRate);
+                Bukkit.getLogger().info("  " + key + ": " + tickRate);
+            }
+            if (tickRates.isEmpty()) {
+                Bukkit.getLogger().info("  None configured");
+            }
+        }
+        public int getTickRate(String type, String typeName, String entityType, int def) {
+            return tickRates.getOrDefault(type + "." + entityType + "." + typeName, tickRates.getOrDefault(type + "." + typeName, def));
+        }
     }
 
     public static boolean teleportingOfVehiclesWithPassenger = true;
diff --git a/src/main/java/net/minecraft/server/Behavior.java b/src/main/java/net/minecraft/server/Behavior.java
index 788d1433e..640dd0d5f 100644
--- a/src/main/java/net/minecraft/server/Behavior.java
+++ b/src/main/java/net/minecraft/server/Behavior.java
@@ -10,6 +10,10 @@ public abstract class Behavior<E extends EntityLiving> {
     private long c;
     private final int d;
     private final int e;
+    // Origami start - configurable behavior tick rate
+    private final String configKey;
+    private static final String RATE_TYPE = "behavior";
+    // Origami end
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> map) {
         this(map, 60);
@@ -24,6 +28,14 @@ public abstract class Behavior<E extends EntityLiving> {
         this.d = i;
         this.e = j;
         this.a = map;
+        // Origami start - configurable behavior tick rate
+        String key = getClass().getName().startsWith("net.minecraft.server.") ? getClass().getSimpleName() : getClass().getName();
+        key = key.toLowerCase();
+        if (key.startsWith(RATE_TYPE)) {
+            key = key.substring(RATE_TYPE.length());
+        }
+        this.configKey = key;
+        // Origami end
     }
 
     public Behavior.Status a() {
@@ -33,7 +45,7 @@ public abstract class Behavior<E extends EntityLiving> {
     public final boolean b(WorldServer worldserver, E e0, long i) {
         if (this.a(e0) && this.a(worldserver, e0)) {
             this.b = Behavior.Status.RUNNING;
-            int j = this.d + worldserver.getRandom().nextInt(this.e + 1 - this.d);
+            int j =  worldserver.origamiConfig.getTickRate(RATE_TYPE, configKey, e0.getMinecraftKey().getKey(), this.d) + worldserver.getRandom().nextInt(this.e + 1 - this.d); // Origami - configurable behavior tick rates
 
             this.c = i + (long) j;
             this.a(worldserver, e0, i);
diff --git a/src/main/java/net/minecraft/server/Sensor.java b/src/main/java/net/minecraft/server/Sensor.java
index e3888dd97..cb92b2485 100644
--- a/src/main/java/net/minecraft/server/Sensor.java
+++ b/src/main/java/net/minecraft/server/Sensor.java
@@ -8,10 +8,22 @@ public abstract class Sensor<E extends EntityLiving> {
     private static final Random a = new Random();
     private final int b;
     private long c;
+    // Origami start - configurable sensor tick rate
+    private final String configKey;
+    private static final String RATE_TYPE = "sensor";
+    // Origami end
 
     public Sensor(int i) {
         this.b = i;
         this.c = (long) Sensor.a.nextInt(i);
+        // Origami start - configurable sensor tick rate
+        String key = getClass().getName().startsWith("net.minecraft.server.") ? getClass().getSimpleName() : getClass().getName();
+        key = key.toLowerCase();
+        if (key.startsWith(RATE_TYPE)) {
+            key = key.substring(RATE_TYPE.length());
+        }
+        this.configKey = key;
+        // Origami end
     }
 
     public Sensor() {
@@ -20,7 +32,7 @@ public abstract class Sensor<E extends EntityLiving> {
 
     public final void b(WorldServer worldserver, E e0) {
         if (--this.c <= 0L) {
-            this.c = (long) this.b;
+            this.c = (long) worldserver.origamiConfig.getTickRate(RATE_TYPE, configKey, e0.getMinecraftKey().getKey(), this.b); // Origami - configurable sensor tick rates
             this.a(worldserver, e0);
         }
 
-- 
2.25.1.windows.1

