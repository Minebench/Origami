From afac9a9cf22c236362b9e0fdaa69eb42c464bcd7 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Mon, 13 Jan 2020 01:00:49 +0100
Subject: [PATCH] Use seed to check for features

This fixes PaperMC/Paper#2312 by using the same seed checking functionality
that is used by the server when generating these features instead of loading
all chunks around the location to check if they have the feature. The chunk
is only loaded after the generator confirmed a feature should be there.

The only downside of this is that it breaks once the seed or generator changes
but this should usually not happen but a config option is available anyways.
---
 .../java/de/minebench/origami/OrigamiConfig.java | 13 +++++++++++++
 .../net/minecraft/server/StructureGenerator.java | 16 ++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/src/main/java/de/minebench/origami/OrigamiConfig.java b/src/main/java/de/minebench/origami/OrigamiConfig.java
index b60eab47..24385589 100644
--- a/src/main/java/de/minebench/origami/OrigamiConfig.java
+++ b/src/main/java/de/minebench/origami/OrigamiConfig.java
@@ -135,6 +135,19 @@ public final class OrigamiConfig {
             pillagerPatrolSpawnDelay = getInt("pillager.patrol.spawn-delay", pillagerPatrolSpawnDelay);
         }
 
+        public boolean fastFeatureSearch = true;
+        public boolean fastFeatureSearchDontLoad = true;
+        private void fastFeatureSearch() {
+            fastFeatureSearch = getBoolean("fast-feature-search", fastFeatureSearch);
+            fastFeatureSearchDontLoad = getBoolean("fast-feature-search-dont-load-chunk", fastFeatureSearchDontLoad);
+            if (fastFeatureSearch) {
+                Bukkit.getLogger().info("Fast feature search is enabled");
+                if (fastFeatureSearchDontLoad) {
+                    Bukkit.getLogger().info("Returning matching chunk rom fast search directly instead of loading it.");
+                }
+            }
+        }
+
         public boolean onlyFindGeneratedFeatures = false;
         private void onlyGetGeneratedFeatures() {
             onlyFindGeneratedFeatures = getBoolean("only-find-generated-features", onlyFindGeneratedFeatures);
diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java
index 6f9bdfd3..fb0b8bbd 100644
--- a/src/main/java/net/minecraft/server/StructureGenerator.java
+++ b/src/main/java/net/minecraft/server/StructureGenerator.java
@@ -104,6 +104,16 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>
                             if (flag1 || flag2) {
                                 ChunkCoordIntPair chunkcoordintpair = this.a(chunkgenerator, seededrandom, j, k, i1, j1);
                                 if (!world.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper
+                                // Origami start - fast feature search by seed
+                                if (world.origamiConfig.fastFeatureSearch) {
+                                    if (!shouldGenerate(chunkgenerator, new SeededRandom(), chunkcoordintpair.x, chunkcoordintpair.z)) {
+                                        continue;
+                                    }
+                                    if (world.origamiConfig.fastFeatureSearchDontLoad) {
+                                        return chunkcoordintpair.l();
+                                    }
+                                }
+                                // Origami end
                                 // Origami start - option to only find generated features to not generate new chunks
                                 final IChunkAccess chunk = world.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z, ChunkStatus.STRUCTURE_STARTS, !world.origamiConfig.onlyFindGeneratedFeatures);
                                 if (chunk == null) {
@@ -174,6 +184,11 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>
                             if (flag1 || flag2) {
                                 ChunkCoordIntPair chunkcoordintpair = this.a(chunkgenerator, seededrandom, j, k, i1, j1);
                                 if (!world.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper
+                                if (world.origamiConfig.fastFeatureSearch) {
+                                    if (!shouldGenerate(chunkgenerator, new SeededRandom(), chunkcoordintpair.x, chunkcoordintpair.z)) {
+                                        continue;
+                                    }
+                                }
                                 chunksToCheck.add(chunkcoordintpair);
                                 if (l == 0) {
                                     break;
@@ -254,6 +269,7 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>
         return new ChunkCoordIntPair(i + k, j + l);
     }
 
+    public boolean shouldGenerate(ChunkGenerator<?> chunkgenerator, Random random, int chunkX, int chunkZ) { return a(chunkgenerator, random, chunkX, chunkZ); } // Origami - OBFHELPER
     public abstract boolean a(ChunkGenerator<?> chunkgenerator, Random random, int i, int j);
 
     public abstract StructureGenerator.a a();
-- 
2.18.0.windows.1

